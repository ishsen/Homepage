[{"/Users/ishansengupta/Desktop/fiber-website/src/index.js":"1","/Users/ishansengupta/Desktop/fiber-website/src/reportWebVitals.js":"2","/Users/ishansengupta/Desktop/fiber-website/src/App.js":"3","/Users/ishansengupta/Desktop/fiber-website/src/MeshDash.js":"4","/Users/ishansengupta/Desktop/fiber-website/src/components/VisibilitySensor.js":"5","/Users/ishansengupta/Desktop/fiber-website/src/components/Experience.js":"6","/Users/ishansengupta/Desktop/fiber-website/src/components/Octahedron.js":"7"},{"size":500,"mtime":1648164606246,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1648164606247,"results":"10","hashOfConfig":"9"},{"size":16659,"mtime":1648172837435,"results":"11","hashOfConfig":"9"},{"size":1780,"mtime":1648164606239,"results":"12","hashOfConfig":"9"},{"size":739,"mtime":1648164606240,"results":"13","hashOfConfig":"9"},{"size":3713,"mtime":1648164606240,"results":"14","hashOfConfig":"9"},{"size":1314,"mtime":1648164606240,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"idnh3k",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/ishansengupta/Desktop/fiber-website/src/index.js",[],["35","36"],"/Users/ishansengupta/Desktop/fiber-website/src/reportWebVitals.js",[],"/Users/ishansengupta/Desktop/fiber-website/src/App.js",["37","38","39","40","41"],"import React, { useState, useRef, useMemo } from \"react\";\nimport { Spring } from \"react-spring/renderprops\";\nimport VisibilitySensor from \"./components/VisibilitySensor\";\nimport \"./styles.css\";\n\nimport * as THREE from \"three/src/Three\";\nimport Octahedron from './components/Octahedron'\nimport { Canvas, useRender } from \"react-three-fiber\";\nimport Chain from './components/Experience'\n\nimport { useTrail, animated as a, useChain } from \"react-spring\";\nimport MeshDash from \"./MeshDash\";\n\nconst FormChain = ({ isVisible }) => {\n  const trail1Ref = useRef();\n  const trail2Ref = useRef();\n  const trail3Ref = useRef();\n  const trail4Ref = useRef();\n\n  useChain(\n    isVisible\n      ? [trail1Ref, trail2Ref, trail3Ref, trail4Ref]\n      : [trail4Ref, trail3Ref, trail2Ref, trail1Ref],\n\n    isVisible ? [0.5, 1.0, 1.5, 2.0] : [0.5, 1.0, 1.5, 2.0]\n  );\n\n  return (\n    <div class=\"container\">\n\n      <form class=\"form-minimal\">\n\n        <FormTrail open={isVisible} trailRef={trail1Ref}>\n\n          <div class=\"minimal-input\">\n            <input\n              class=\"minimal-textfield\"\n              id=\"first-name\"\n              type=\"text\"\n              autocomplete=\"off\"\n            />\n            <div\n              class=\"textfield-underline\"\n              style={{ width: isVisible ? \"100%\" : \"0%\" }}\n            ></div>\n            <label for=\"first-name\">First name</label>\n          </div>\n        </FormTrail>\n\n        <FormTrail open={isVisible} trailRef={trail2Ref}>\n          <div class=\"minimal-input\">\n            <input\n              class=\"minimal-textfield\"\n              id=\"last-name\"\n              type=\"text\"\n              autocomplete=\"off\"\n            />\n            <div\n              class=\"textfield-underline\"\n              style={{ width: isVisible ? \"100%\" : \"0%\" }}\n            ></div>\n            <label for=\"last-name\">Last name</label>\n          </div>\n        </FormTrail>\n\n        <FormTrail open={isVisible} trailRef={trail3Ref}>\n          <div class=\"minimal-input\">\n            <input\n              class=\"minimal-textfield\"\n              id=\"email\"\n              type=\"text\"\n              autocomplete=\"off\"\n            />\n            <div\n              class=\"textfield-underline\"\n              style={{ width: isVisible ? \"100%\" : \"0%\" }}\n            ></div>\n            <label for=\"email\">Email</label>\n          </div>\n        </FormTrail>\n\n        <FormTrail open={isVisible} trailRef={trail4Ref}>\n          <button class=\"btn-minimal\" type=\"submit\">\n            Send\n          </button>\n        </FormTrail>\n      </form>\n    </div>\n  );\n};\n\n\n\nfunction Trail({ open, children, ...props }) {\n  const items = React.Children.toArray(children);\n\n  const trail = useTrail(items.length, {\n    config: { mass: 5, tension: 2000, friction: 200 },\n    opacity: open ? 1 : 0,\n    x: open ? 0 : 20,\n    height: open ? 110 : 0,\n    from: { opacity: 0, x: 20, height: 0 },\n  });\n  return (\n    <div className=\"flex__page trails-main\" {...props}>\n      <div>\n        {trail.map(({ x, height, ...rest }, index) => (\n          <a.div\n            key={items[index]}\n            className=\"trails-text\"\n            style={{\n              ...rest,\n              transform: x.interpolate((x) => `translate3d(0,${x}px,0)`),\n            }}\n          >\n            <a.div>{items[index]}</a.div>\n          </a.div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst PAGE_INFO = {\n  contact_info: {\n    phone: \"443-760-1159\",\n    emails: [\"ishan6060@gmail.com\", \"ishsen6060@gmail.com\"],\n    github: \"https://www.github.com/ishsen\"\n  },\n  projects: [\n    {\n      number: '01', title: 'CLIP STUDIO Version Control CLI',\n      languages: 'Node.js, Git',\n      link: \"https://github.com/ishsen/clip-git\",\n\n      points: [\"A command line interface for quickly previewing png images and getting layer information for .clip files committed to an existing repository with GIT LFS enabled\",\n        \"Allows retrieval of multiple version to view progression of image over time and get previous version quickly without opening CLIP STUDIO program\"\n      ]\n\n    },\n    {\n      number: '02', title: 'Epidemic Particle Simulation',\n      languages: 'WebGL, Javascript, CSS, HTML',\n      link: \"https://github.com/ishsen/webgl_particle_simulation\",\n      points: [\"The progression of an infectious disease modeled by a particle simulation. Two particles colliding carries a chance of spread based on heuristics and chance of susceptibility and infectivity of colliding particles\",\n        \"Utilized insights in epidemiology in order to accurately portray interactions between particles and gauge statistical chance of infection spread\"\n      ]\n\n    },\n    {\n      number: '03', title: 'Web Novel Summarizer',\n      languages: 'Python',\n      link: \"https://github.com/ishsen/light-novel-cli\",\n      points: ['A command line tool to read and navigate through web novel/light novel websites in the terminal. Uses machine learning and text summarization algorithms to get summaries for specified number of chapters for an inputted story.',\n\n      ]\n\n    },\n    {\n      number: '04', title: 'OpenGL IMGUI Editor',\n      languages: 'C++, IMGUI, OpenGL',\n      link: \"https://github.com/ishsen/PictureOpenGL\",\n      points: ['A simple OpenGl object editor with a IMGUI menu system to manipulate object properties and save an image for export to Clip Studio or Photoshop'\n\n      ]\n\n    },\n    {\n      number: '05', title: 'Letterboxd Chrome Extension',\n      languages: 'Javascript, Tensorflow',\n      link: \"https://github.com/ishsen/Letterboxd-Chrome\",\n      points: ['A set of tools for the Letterboxd web page including a tensorflow.js sentimentality model for reviews on movies'\n\n      ]\n\n    },\n\n\n  ]\n}\n\n\nfunction FormTrail({ open, trailRef, children, ...props }) {\n  const items = React.Children.toArray(children);\n\n  const trail = useTrail(items.length, {\n    config: { mass: 5, tension: 2000, friction: 200 },\n    opacity: open ? 1 : 0,\n    x: open ? 0 : 20,\n    ref: trailRef,\n    height: open ? 110 : 0,\n    from: { opacity: 0, x: 20, height: 0 },\n    reverse: !open,\n  });\n  return (\n    <div className=\"flex__page forms-side\" {...props}>\n      {trail.map(({ x, height, ...rest }, index) => (\n        <a.div\n          key={items[index]}\n          className=\"forms-text\"\n          style={{\n            ...rest,\n            transform: x.interpolate((x) => `translate3d(0,${x}px,0)`),\n          }}\n        >\n          <a.div>{items[index]}</a.div>\n        </a.div>\n      ))}\n    </div>\n  );\n}\n\n\n\nfunction App() {\n  const [active, setActive] = useState(false);\n  const [hovered, setHover] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  function changeFocus(n) {\n    setActive(!active)\n    setActiveIndex(n)\n\n  }\n\n  return (\n    <main>\n      <div className=\"frame\">\n        <div className=\"frame__title-wrap\">\n          <h1 className=\"frame__title\">Ishan Sengupta</h1>\n          <p className=\"frame__tagline\">Front-end Experiment</p>\n        </div>\n        <div className=\"frame__links\">\n          <a href=\"https://www.dropbox.com/s/wchtpctilaxujfv/ISHAN_UPDATED_RESUME.pdf?dl=0\">\n            Resume\n          </a>\n        </div>\n        <div className=\"frame__demos\">\n          <a\n            href=\"https://isengupt.github.io/glass-blur/\"\n            activeClassName=\"frame__demo--current\"\n            className=\"frame__demo\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 16 16\"\n              width=\"16\"\n              height=\"16\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M7.78 12.53a.75.75 0 01-1.06 0L2.47 8.28a.75.75 0 010-1.06l4.25-4.25a.75.75 0 011.06 1.06L4.81 7h7.44a.75.75 0 010 1.5H4.81l2.97 2.97a.75.75 0 010 1.06z\"\n              ></path>\n            </svg>\n          </a>\n          <a\n            href=\"https://github.com/isengupt/fiber-website\"\n            activeClassName=\"frame__demo--current\"\n            className=\"frame__demo\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 16 16\"\n              width=\"16\"\n              height=\"16\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"\n              ></path>\n            </svg>\n          </a>\n          <a\n            href='#'\n            activeClassName=\"frame__demo--current\"\n            className=\"frame__demo\"\n\n\n\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 16 16\"\n              width=\"16\"\n              height=\"16\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M8 2a.75.75 0 01.75.75v4.5h4.5a.75.75 0 010 1.5h-4.5v4.5a.75.75 0 01-1.5 0v-4.5h-4.5a.75.75 0 010-1.5h4.5v-4.5A.75.75 0 018 2z\"\n              ></path>\n            </svg>\n          </a>\n        </div>\n      </div>\n      <div className=\"content\">\n        <div style={{ width: \"100%\" }}>\n          <div className=\"div\">\n            <div className=\"page__container\">\n              <MeshDash />\n              <VisibilitySensor partialVisibility>\n                {({ isVisible }) => (\n                  <>\n                    <Trail open={isVisible}>\n                      <div className=\"page__name\">EDUCATION</div>\n                      <div className=\"page__line\">\n                        <div\n                          className=\"line\"\n                          style={{ width: isVisible ? \"50px\" : \"0px\" }}\n                        ></div>\n                      </div>\n                      <div className=\"page__title\">\n                        University of Maryland, College Park\n                      </div>\n                      <div className=\"page__description\">\n                        Bachelor of Science in Mathematics, Minor in Physics\n                      </div>\n                    </Trail>\n                  </>\n                )}\n              </VisibilitySensor>\n            </div>\n          </div>\n          <div className=\"div\">\n            <VisibilitySensor partialVisibility>\n              {({ isVisible }) => <Chain isVisible={isVisible} />}\n            </VisibilitySensor>\n          </div>\n          <div className=\"div\"\n\n\n          >\n            <div className=\"page__container page__grid__alternate z_front\"\n\n            >\n              <div className=\"grid__item\">\n                <VisibilitySensor partialVisibility>\n                  {({ isVisible }) => (\n                    <Trail open={isVisible}>\n                      <div className=\"page__name\"  >PROJECTS</div>\n                      <div className=\"page__line\">\n                        <div className=\"line\"></div>\n                      </div>\n                      <div className=\"page__title\"\n                        onClick={e => setActive(!active)} onPointerOver={e => setHover(true)} onPointerOut={e => setHover(false)}\n                      >\n                        Projects in programming\n                      </div>\n\n                      {PAGE_INFO.projects.map((item, i) =>\n                <div\n                className=\"page__description page__big page__flex\"\n                onClick={e => setActive(!active)} onPointerOver={e => setHover(true)} onPointerOut={e => setHover(false)}\n              >\n                <div className=\"page__number\" style={{ opacity: activeIndex === 0 ? 1 : 0.5 }} >{item.number}</div>\n                <div className=\"page__description page__white\"\n\n                  onClick={e => changeFocus(i)}\n                  style={{ opacity: activeIndex === 0 ? 1 : 0.5 }}>{item.title}</div>\n              </div> \n\n                          )}\n\n           \n                      \n                     \n                    </Trail>\n                  )}\n                </VisibilitySensor>\n              </div>\n              <div className=\"grid__item full_height\"\n\n              >\n                <VisibilitySensor partialVisibility>\n                  {({ isVisible }) => (\n                    <>\n                      <Spring\n                        delay={300}\n                        to={{\n                          position: \"absolute\",\n                          opacity: isVisible ? 1 : 0,\n                        }}\n                      >\n                        {({ opacity }) => (\n                          <Canvas\n                            style={{ position: \"absolute\", opacity: opacity }}\n                          >\n                            <ambientLight color=\"lightblue\" />\n                            <pointLight\n                              color=\"white\"\n                              intensity={1}\n                              position={[10, 10, 10]}\n                            />\n                            <Octahedron active={active} hovered={hovered} />\n                          </Canvas>\n                        )}\n                      </Spring>\n                      <div className=\"altered__text\">\n                        <Trail open={isVisible}>\n\n\n                          <div className=\"page__description page__big page__flex page__bold\">\n                            <div className=\"page__number\">{PAGE_INFO.projects[activeIndex].number}</div>\n                            <div>{PAGE_INFO.projects[activeIndex].title}</div>\n                          </div>\n                          <div className=\"page__subtitle page__small\" style={{ fontWeight: 'bold', opacity: 0.5 }}>{PAGE_INFO.projects[activeIndex].languages}</div>\n                         <a className=\"page__subtitle page__small\">{PAGE_INFO.projects[activeIndex].link}</a>\n                         \n                          {PAGE_INFO.projects[activeIndex].points.map((item) =>\n                            <div\n                              className=\"page__description page__small\"\n\n                            >\n                              {item}\n                            </div>\n\n                          )}\n\n\n                        </Trail>\n                      </div>\n                    </>\n                  )}\n                </VisibilitySensor>\n              </div>\n            </div>\n          </div>\n          <div className=\"div\">\n            <div className=\"page__container page__grid__alternate\">\n              <div className=\"grid__item\">\n                <VisibilitySensor partialVisibility>\n                  {({ isVisible }) => (\n                    <Trail open={isVisible}>\n                      <div className=\"page__name\">Contact</div>\n                      <div className=\"page__line\">\n                        <div className=\"line\"></div>\n                      </div>\n                      <div className=\"page__title\">\n                        Get in contact or inquire about projects\n                      </div>\n                      <div className=\"page__description page__big page__flex\">\n                        <div className=\"page__number\">Phone:</div>\n                        <div>{PAGE_INFO.contact_info.phone}</div>\n                      </div>\n                      <div className=\"page__description page__big page__flex\">\n                        <div className=\"page__number\">Email:</div>\n                        <div>{PAGE_INFO.contact_info.emails[0]}</div>\n                      </div>\n                      <div className=\"page__description page__big page__flex\">\n                        <div className=\"page__number\">Github:</div>\n                        <a href= {PAGE_INFO.contact_info.github}>{PAGE_INFO.contact_info.github}</a>\n                      </div>\n\n                      <div className=\"page__description page__big page__flex\">\n                        <div className=\"page__number\">Alternate:</div>\n                        <div>{PAGE_INFO.contact_info.emails[1]}</div>\n                      </div>\n\n                    </Trail>\n                  )}\n                </VisibilitySensor>\n              </div>\n\n              <VisibilitySensor once>\n                {({ isVisible }) => <FormChain isVisible={isVisible} />}\n              </VisibilitySensor>\n\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","/Users/ishansengupta/Desktop/fiber-website/src/MeshDash.js",["42","43","44"],"import React, { useMemo, useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport * as meshline from \"threejs-meshline\";\nimport {\n  extend,\n  Canvas,\n  useFrame,\n  useThree,\n \n\n} from \"react-three-fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Curves } from \"three/examples/jsm/curves/CurveExtras\";\n\n\nimport \"./styles.css\";\n\n\nextend(meshline);\nextend({ OrbitControls });\n\n\n\n\n\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef();\n\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed));\n\n  return (\n    <mesh rotation={[0, Math.random() * Math.PI, 0]}>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={width}\n        color={color}\n        dashArray={0.01}\n        dashRatio={0.95}\n      />\n    </mesh>\n  );\n}\n\nconst lineWidth = 0.2;\nconst count = 200;\n\nfunction Lines({ count, colors }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map(() => {\n        const curve = new Curves.VivianiCurve(70).getPoints(30);\n\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: lineWidth,\n          speed: Math.max(0.0001, 0.0005 * Math.random()),\n          curve\n        };\n      }),\n    [colors, count]\n  );\n  return lines.map((props, index) => <Fatline key={index} {...props} />);\n}\n\nexport default function MeshDash() {\n  return (\n    <div style={{position: 'absolute', width: '100%', height: '100%'}}>\n      <Canvas camera={{ position: [0, 300, 300], fov: 25 }}>\n \n        <Lines count={count} colors={[\"#9e91bc\", \"#4a4e7c\", \"#6f7db7\"]} />\n      </Canvas>\n    </div>\n  );\n}","/Users/ishansengupta/Desktop/fiber-website/src/components/VisibilitySensor.js",[],["45","46"],"/Users/ishansengupta/Desktop/fiber-website/src/components/Experience.js",["47","48"],"\nimport React, { useState, useRef, useMemo } from \"react\";\nimport { useTrail, animated as a, useChain } from \"react-spring\";\n\n\nfunction ChainTrail({ open, trailRef, children, ...props }) {\n    const items = React.Children.toArray(children);\n  \n    const trail = useTrail(items.length, {\n      config: { mass: 5, tension: 2000, friction: 200 },\n      opacity: open ? 1 : 0,\n      x: open ? 0 : 20,\n      ref: trailRef,\n      height: open ? 110 : 0,\n      from: { opacity: 0, x: 20, height: 0 },\n      reverse: !open,\n    });\n    return (\n      <div className=\"flex__page trails-side\" {...props}>\n        <div>\n          {trail.map(({ x, height, ...rest }, index) => (\n            <a.div\n              key={items[index]}\n              className=\"trails-text\"\n              style={{\n                ...rest,\n                transform: x.interpolate((x) => `translate3d(0,${x}px,0)`),\n              }}\n            >\n              <a.div>{items[index]}</a.div>\n            </a.div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\nexport default function Chain ({ isVisible })  {\n    const trail1Ref = useRef();\n  \n    const trail2Ref = useRef();\n  \n    const trail3Ref = useRef();\n  \n    useChain(\n      isVisible\n        ? [trail1Ref, trail2Ref, trail3Ref]\n        : [trail3Ref, trail2Ref, trail1Ref],\n  \n      isVisible ? [0.4, 0.8, 1.2] : [0.4, 0.8, 1.2]\n    );\n  \n    return (\n      <div className=\"page__container page__grid\">\n        <div className=\"grid__item\">\n          <ChainTrail open={isVisible} trailRef={trail1Ref}>\n            <div className=\"page__name\">INTERN</div>\n            <div className=\"page__line\">\n              <div className=\"line\"></div>\n            </div>\n            <div className=\"page__title\">\n            Future Doctors Organization\n            </div>\n            <div className=\"page__subtitle\">\n            Remote\n            </div>\n            <div className=\"page__description page__small\">\n            Built a React, Meteor.js full stack web application that uses the publication and subscription pattern \n            </div>\n            <div className=\"page__description page__small\">\n            Created multiple schemas for the events, announcements, and auxiliary data \n            </div>\n          \n          </ChainTrail>\n        </div>\n        <div className=\"grid__item\">\n          <ChainTrail open={isVisible} trailRef={trail2Ref}>\n            <div className=\"page__name\">01</div>\n            <div className=\"page__line\">\n              <div className=\"line\"></div>\n            </div>\n            <div className=\"page__title title__small\">\n            Contain Covid\n            </div>\n            <div className=\"page__subtitle page__small\">\n            Remote\n            </div>\n            <div className=\"page__description page__small\">\n            Aided in implementing a web application that takes user’s Google takeout data to tag locations for manual contact tracing\n            </div>\n          </ChainTrail>\n        </div>\n  \n        <div className=\"grid__item\">\n          <ChainTrail open={isVisible} trailRef={trail3Ref}>\n            <div className=\"page__name\">02</div>\n            <div className=\"page__line\">\n              <div className=\"line\"></div>\n            </div>\n            <div className=\"page__title title__small\">\n            Neuroscience Research Assistant\n            </div>\n            <div className=\"page__subtitle page__small\">\n            Remote\n            </div>\n            <div className=\"page__description page__small\">\n            Created an OpenCV optical-flow program in Python that uses the Lucas-Kanade method to track motion of objects\n\n            </div>\n          </ChainTrail>\n        </div>\n      </div>\n    );\n  };","/Users/ishansengupta/Desktop/fiber-website/src/components/Octahedron.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":35,"nodeType":"55","messageId":"56","endLine":1,"endColumn":42},{"ruleId":"53","severity":1,"message":"57","line":6,"column":13,"nodeType":"55","messageId":"56","endLine":6,"endColumn":18},{"ruleId":"53","severity":1,"message":"58","line":8,"column":18,"nodeType":"55","messageId":"56","endLine":8,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":273,"column":11,"nodeType":"61","endLine":280,"endColumn":12},{"ruleId":"59","severity":1,"message":"62","line":406,"column":26,"nodeType":"61","endLine":406,"endColumn":68},{"ruleId":"53","severity":1,"message":"63","line":1,"column":34,"nodeType":"55","messageId":"56","endLine":1,"endColumn":43},{"ruleId":"53","severity":1,"message":"57","line":2,"column":13,"nodeType":"55","messageId":"56","endLine":2,"endColumn":18},{"ruleId":"53","severity":1,"message":"64","line":8,"column":3,"nodeType":"55","messageId":"56","endLine":8,"endColumn":11},{"ruleId":"49","replacedBy":"65"},{"ruleId":"51","replacedBy":"66"},{"ruleId":"53","severity":1,"message":"67","line":2,"column":17,"nodeType":"55","messageId":"56","endLine":2,"endColumn":25},{"ruleId":"53","severity":1,"message":"54","line":2,"column":35,"nodeType":"55","messageId":"56","endLine":2,"endColumn":42},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'THREE' is defined but never used.","'useRender' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'useThree' is defined but never used.",["68"],["69"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]